generator client {
  provider = "prisma-client-js"
  output   = "client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  email         String     @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  role          String     @default("member")
  accounts      Account[]
  sessions      Session[]
  orders        Orders[]
  reviews       Reviews[]
  wishlist      Wishlist[]
  passkeys      Passkey[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Passkey {
  id             String   @id
  name           String?
  publicKey      String
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  webauthnUserID String
  counter        Int
  deviceType     String
  backedUp       Boolean
  transports     String?
  createdAt      DateTime @default(now())
  credentialID   String

  @@map("passkey")
}

model Orders {
  orderId        Int        @id @default(autoincrement())
  userId         String
  price_paid     Float
  payment_method String
  order_status   String     @default("Pending")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  products       Products[]

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model Categories {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  products  Products[]
}

model Tags {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  products  Products[]
}

model Specifications {
  id        Int      @id @default(autoincrement())
  info      String[]
  spec      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products   Products? @relation(fields: [productsId], references: [id], onDelete: Cascade)
  productsId Int?
}

model Images {
  id        Int      @id @default(autoincrement())
  alt       String
  src       String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products   Products? @relation(fields: [productsId], references: [id], onDelete: Cascade)
  productsId Int?
}

model Reviews {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  user       User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  products   Products? @relation(fields: [productsId], references: [id])
  productsId Int?
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user       User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  products   Products? @relation(fields: [productsId], references: [id])
  productsId Int?
}

model Products {
  id              Int              @id @default(autoincrement())
  name            String
  slug            String
  description     String
  specifications  Specifications[]
  categories      Categories[]
  tags            Tags[]
  images          Images[]
  orders          Orders[]
  reviews         Reviews[]
  wishlist        Wishlist[]
  price           String           @default("0.00")
  sale_price      String?
  purchase_note   String?
  visible         Boolean          @default(true)
  purchasable     Boolean          @default(true)
  reviews_allowed Boolean          @default(true)
  featured        Boolean          @default(false)
  stock_quantity  Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
}
